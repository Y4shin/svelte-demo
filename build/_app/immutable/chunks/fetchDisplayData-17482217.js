import{d as n}from"./db-6dba99b9.js";const l=async r=>{const s=await n.course.where("cID").equals(r).first();if(!s)throw new Error(`Course ${r} does not exist`);return s.version},I=async()=>(await n.course.toArray()).map(r=>({id:r.cID,title:r.title,shortTitle:r.shortTitle,version:r.version})),D=async r=>{const s=await n.course.where("cID").equals(r).first(),t=await n.lesson.where("cID").equals(r).toArray();return s?{type:"data",course:{id:s.cID,title:s.title,shortTitle:s.shortTitle,feedback:{progress:{current:s.progressCurrent,total:s.progressTotal},warning:s.progressWarning},lessons:t.map(e=>({name:e.title,slug:e.lID,progress:{current:e.progressCurrent,total:e.progressTotal}}))}}:{type:"error",error:{title:"Not found",description:`1: The course ${r} was not found`}}},f=async(r,s)=>{const t=await n.lesson.where(["cID","lID"]).equals([r,s]).first(),e=await n.course.where("cID").equals(r).first(),i=(await n.task.where(["cID","lID"]).equals([r,s]).toArray()).sort((o,c)=>o.orderKey-c.orderKey);return console.log(i.map(o=>[o.qID,o.orderKey])),t&&e?{type:"data",lesson:{id:t.lID,courseId:t.cID,courseTitle:e.title,courseShortTitle:e.shortTitle,title:t.title,shortTitle:t.shortTitle,description:t.description,feedback:{progress:{current:t.progressCurrent,total:t.progressTotal},warning:t.progressWarning},tasks:i.map(o=>({id:o.qID,name:o.name,status:o.status}))}}:{type:"error",error:{title:"Not found",description:`2: The lesson ${s} in course ${r} was not found`}}},w=async(r,s,t)=>{const e=await n.task.where(["cID","lID","qID"]).equals([r,s,t]).first();return e?{type:"data",task:{id:e.qID,name:e.name,status:e.status,lessonId:e.lID,courseId:e.cID,task:e.data,navigation:{nextId:e.nextId,prevId:e.prevId}}}:{type:"error",error:{title:"Not found",description:`3: The task ${t} in lesson ${s} in course ${r} was not found`}}},y=async(r,s,t)=>{const e=await n.taskProgress.where(["cID","lID","qID"]).equals([r,s,t]).first();return e?{type:"data",progress:e.feedback.reduce((i,o)=>i&&i.timestamp>o.timestamp?i:o,void 0),status:e.status}:{type:"error",error:{title:"Not found",description:`4: The taskFeedback ${t} in lesson ${s} in course ${r} was not found`}}},h=async(r,s,t)=>{const e=await n.task.where(["cID","lID"]).equals([r,s]).toArray(),i=e.filter(a=>a.status==="notstarted"&&(t?a.qID!==t:!0));if(i.length!==0)return{type:"data",taskslug:i[0].qID};const o=e.filter(a=>a.status==="inprogress"&&(t?a.qID!==t:!0));if(o.length!==0)return{type:"data",taskslug:o[0].qID};const c=e.filter(a=>a.status==="fail"&&(t?a.qID!==t:!0));if(c.length!==0)return{type:"data",taskslug:c[0].qID};const d=e.filter(a=>a.status==="warning"&&(t?a.qID!==t:!0));if(d.length!==0)return{type:"data",taskslug:d[0].qID};const u=e.filter(a=>a.status==="success"&&(t?a.qID!==t:!0));return u.length!==0?{type:"data",taskslug:u[0].qID}:{type:"error",error:{title:"Not found",description:`5: No next task found in lesson ${s} in course ${r}`,code:"no_next_task"}}};export{D as a,f as b,y as c,l as d,h as e,w as f,I as g};
